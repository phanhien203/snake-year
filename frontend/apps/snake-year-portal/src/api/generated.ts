/**
 * Generated by orval v7.4.1 üç∫
 * Do not edit manually.
 * Swagger Petstore
 * This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key `special-key` to test the authorization filters.
 * OpenAPI spec version: 1.0.7
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query'
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import { customInstance } from './axiosInstance';
import type { ErrorType, BodyType } from './axiosInstance';
export type LoginUserParams = {
/**
 * The user name for login
 */
username: string;
/**
 * The password for login in clear text
 */
password: string;
};

export type GetInventory200 = {[key: string]: number};

export type UpdatePetWithFormBody = {
  /** Updated name of the pet */
  name?: string;
  /** Updated status of the pet */
  status?: string;
};

export type FindPetsByTagsParams = {
/**
 * Tags to filter by
 */
tags: string[];
};

export type FindPetsByStatusStatusItem = typeof FindPetsByStatusStatusItem[keyof typeof FindPetsByStatusStatusItem];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const FindPetsByStatusStatusItem = {
  available: 'available',
  pending: 'pending',
  sold: 'sold',
} as const;

export type FindPetsByStatusParams = {
/**
 * Status values that need to be considered for filter
 */
status: FindPetsByStatusStatusItem[];
};

export type UploadFileBody = {
  /** Additional data to pass to server */
  additionalMetadata?: string;
  /** file to upload */
  file?: Blob;
};

/**
 * Pet object that needs to be added to the store
 */
export type PetBody = Pet;

export interface User {
  id?: number;
  username?: string;
  firstName?: string;
  lastName?: string;
  email?: string;
  password?: string;
  phone?: string;
  /** User Status */
  userStatus?: number;
}

/**
 * List of user object
 */
export type UserArrayBody = User[];

/**
 * Order Status
 */
export type OrderStatus = typeof OrderStatus[keyof typeof OrderStatus];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const OrderStatus = {
  placed: 'placed',
  approved: 'approved',
  delivered: 'delivered',
} as const;

export interface Order {
  id?: number;
  petId?: number;
  quantity?: number;
  shipDate?: string;
  /** Order Status */
  status?: OrderStatus;
  complete?: boolean;
}

export interface Tag {
  id?: number;
  name?: string;
}

/**
 * pet status in the store
 */
export type PetStatus = typeof PetStatus[keyof typeof PetStatus];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PetStatus = {
  available: 'available',
  pending: 'pending',
  sold: 'sold',
} as const;

export interface Category {
  id?: number;
  name?: string;
}

export interface Pet {
  id?: number;
  category?: Category;
  name: string;
  photoUrls: string[];
  tags?: Tag[];
  /** pet status in the store */
  status?: PetStatus;
}

export interface ApiResponse {
  code?: number;
  type?: string;
  message?: string;
}




type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];


/**
 * @summary uploads an image
 */
export const uploadFile = (
    petId: number,
    uploadFileBody: BodyType<UploadFileBody>,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      const formData = new FormData();
if(uploadFileBody.additionalMetadata !== undefined) {
 formData.append('additionalMetadata', uploadFileBody.additionalMetadata)
 }
if(uploadFileBody.file !== undefined) {
 formData.append('file', uploadFileBody.file)
 }

      return customInstance<ApiResponse>(
      {url: `/pet/${petId}/uploadImage`, method: 'POST',
      headers: {'Content-Type': 'multipart/form-data', },
       data: formData, signal
    },
      options);
    }
  


export const getUploadFileMutationOptions = <TData = Awaited<ReturnType<typeof uploadFile>>, TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<TData, TError,{petId: number;data: BodyType<UploadFileBody>}, TContext>, request?: SecondParameter<typeof customInstance>}
) => {
const mutationKey = ['uploadFile'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof uploadFile>>, {petId: number;data: BodyType<UploadFileBody>}> = (props) => {
          const {petId,data} = props ?? {};

          return  uploadFile(petId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions } as UseMutationOptions<TData, TError,{petId: number;data: BodyType<UploadFileBody>}, TContext>}

    export type UploadFileMutationResult = NonNullable<Awaited<ReturnType<typeof uploadFile>>>
    export type UploadFileMutationBody = BodyType<UploadFileBody>
    export type UploadFileMutationError = ErrorType<unknown>

    /**
 * @summary uploads an image
 */
export const useUploadFile = <TData = Awaited<ReturnType<typeof uploadFile>>, TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<TData, TError,{petId: number;data: BodyType<UploadFileBody>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationResult<
        TData,
        TError,
        {petId: number;data: BodyType<UploadFileBody>},
        TContext
      > => {

      const mutationOptions = getUploadFileMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Add a new pet to the store
 */
export const addPet = (
    petBody: BodyType<PetBody>,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<unknown>(
      {url: `/pet`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: petBody, signal
    },
      options);
    }
  


export const getAddPetMutationOptions = <TData = Awaited<ReturnType<typeof addPet>>, TError = ErrorType<void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<TData, TError,{data: BodyType<PetBody>}, TContext>, request?: SecondParameter<typeof customInstance>}
) => {
const mutationKey = ['addPet'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof addPet>>, {data: BodyType<PetBody>}> = (props) => {
          const {data} = props ?? {};

          return  addPet(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions } as UseMutationOptions<TData, TError,{data: BodyType<PetBody>}, TContext>}

    export type AddPetMutationResult = NonNullable<Awaited<ReturnType<typeof addPet>>>
    export type AddPetMutationBody = BodyType<PetBody>
    export type AddPetMutationError = ErrorType<void>

    /**
 * @summary Add a new pet to the store
 */
export const useAddPet = <TData = Awaited<ReturnType<typeof addPet>>, TError = ErrorType<void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<TData, TError,{data: BodyType<PetBody>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationResult<
        TData,
        TError,
        {data: BodyType<PetBody>},
        TContext
      > => {

      const mutationOptions = getAddPetMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Update an existing pet
 */
export const updatePet = (
    petBody: BodyType<PetBody>,
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<unknown>(
      {url: `/pet`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: petBody
    },
      options);
    }
  


export const getUpdatePetMutationOptions = <TData = Awaited<ReturnType<typeof updatePet>>, TError = ErrorType<void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<TData, TError,{data: BodyType<PetBody>}, TContext>, request?: SecondParameter<typeof customInstance>}
) => {
const mutationKey = ['updatePet'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updatePet>>, {data: BodyType<PetBody>}> = (props) => {
          const {data} = props ?? {};

          return  updatePet(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions } as UseMutationOptions<TData, TError,{data: BodyType<PetBody>}, TContext>}

    export type UpdatePetMutationResult = NonNullable<Awaited<ReturnType<typeof updatePet>>>
    export type UpdatePetMutationBody = BodyType<PetBody>
    export type UpdatePetMutationError = ErrorType<void>

    /**
 * @summary Update an existing pet
 */
export const useUpdatePet = <TData = Awaited<ReturnType<typeof updatePet>>, TError = ErrorType<void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<TData, TError,{data: BodyType<PetBody>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationResult<
        TData,
        TError,
        {data: BodyType<PetBody>},
        TContext
      > => {

      const mutationOptions = getUpdatePetMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * Multiple status values can be provided with comma separated strings
 * @summary Finds Pets by status
 */
export const findPetsByStatus = (
    params: FindPetsByStatusParams,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<Pet[]>(
      {url: `/pet/findByStatus`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getFindPetsByStatusQueryKey = (params: FindPetsByStatusParams,) => {
    return [`/pet/findByStatus`, ...(params ? [params]: [])] as const;
    }

    
export const getFindPetsByStatusQueryOptions = <TData = Awaited<ReturnType<typeof findPetsByStatus>>, TError = ErrorType<void>>(params: FindPetsByStatusParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof findPetsByStatus>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getFindPetsByStatusQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof findPetsByStatus>>> = ({ signal }) => findPetsByStatus(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof findPetsByStatus>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type FindPetsByStatusQueryResult = NonNullable<Awaited<ReturnType<typeof findPetsByStatus>>>
export type FindPetsByStatusQueryError = ErrorType<void>


export function useFindPetsByStatus<TData = Awaited<ReturnType<typeof findPetsByStatus>>, TError = ErrorType<void>>(
 params: FindPetsByStatusParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof findPetsByStatus>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof findPetsByStatus>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useFindPetsByStatus<TData = Awaited<ReturnType<typeof findPetsByStatus>>, TError = ErrorType<void>>(
 params: FindPetsByStatusParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof findPetsByStatus>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof findPetsByStatus>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useFindPetsByStatus<TData = Awaited<ReturnType<typeof findPetsByStatus>>, TError = ErrorType<void>>(
 params: FindPetsByStatusParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof findPetsByStatus>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Finds Pets by status
 */

export function useFindPetsByStatus<TData = Awaited<ReturnType<typeof findPetsByStatus>>, TError = ErrorType<void>>(
 params: FindPetsByStatusParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof findPetsByStatus>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getFindPetsByStatusQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.
 * @deprecated
 * @summary Finds Pets by tags
 */
export const findPetsByTags = (
    params: FindPetsByTagsParams,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<Pet[]>(
      {url: `/pet/findByTags`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getFindPetsByTagsQueryKey = (params: FindPetsByTagsParams,) => {
    return [`/pet/findByTags`, ...(params ? [params]: [])] as const;
    }

    
export const getFindPetsByTagsQueryOptions = <TData = Awaited<ReturnType<typeof findPetsByTags>>, TError = ErrorType<void>>(params: FindPetsByTagsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof findPetsByTags>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getFindPetsByTagsQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof findPetsByTags>>> = ({ signal }) => findPetsByTags(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof findPetsByTags>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type FindPetsByTagsQueryResult = NonNullable<Awaited<ReturnType<typeof findPetsByTags>>>
export type FindPetsByTagsQueryError = ErrorType<void>


export function useFindPetsByTags<TData = Awaited<ReturnType<typeof findPetsByTags>>, TError = ErrorType<void>>(
 params: FindPetsByTagsParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof findPetsByTags>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof findPetsByTags>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useFindPetsByTags<TData = Awaited<ReturnType<typeof findPetsByTags>>, TError = ErrorType<void>>(
 params: FindPetsByTagsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof findPetsByTags>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof findPetsByTags>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useFindPetsByTags<TData = Awaited<ReturnType<typeof findPetsByTags>>, TError = ErrorType<void>>(
 params: FindPetsByTagsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof findPetsByTags>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @deprecated
 * @summary Finds Pets by tags
 */

export function useFindPetsByTags<TData = Awaited<ReturnType<typeof findPetsByTags>>, TError = ErrorType<void>>(
 params: FindPetsByTagsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof findPetsByTags>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getFindPetsByTagsQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * Returns a single pet
 * @summary Find pet by ID
 */
export const getPetById = (
    petId: number,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<Pet>(
      {url: `/pet/${petId}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetPetByIdQueryKey = (petId: number,) => {
    return [`/pet/${petId}`] as const;
    }

    
export const getGetPetByIdQueryOptions = <TData = Awaited<ReturnType<typeof getPetById>>, TError = ErrorType<void>>(petId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPetById>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetPetByIdQueryKey(petId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getPetById>>> = ({ signal }) => getPetById(petId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(petId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getPetById>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetPetByIdQueryResult = NonNullable<Awaited<ReturnType<typeof getPetById>>>
export type GetPetByIdQueryError = ErrorType<void>


export function useGetPetById<TData = Awaited<ReturnType<typeof getPetById>>, TError = ErrorType<void>>(
 petId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPetById>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPetById>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetPetById<TData = Awaited<ReturnType<typeof getPetById>>, TError = ErrorType<void>>(
 petId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPetById>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPetById>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetPetById<TData = Awaited<ReturnType<typeof getPetById>>, TError = ErrorType<void>>(
 petId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPetById>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Find pet by ID
 */

export function useGetPetById<TData = Awaited<ReturnType<typeof getPetById>>, TError = ErrorType<void>>(
 petId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPetById>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetPetByIdQueryOptions(petId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Updates a pet in the store with form data
 */
export const updatePetWithForm = (
    petId: number,
    updatePetWithFormBody: BodyType<UpdatePetWithFormBody>,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      const formUrlEncoded = new URLSearchParams();
if(updatePetWithFormBody.name !== undefined) {
 formUrlEncoded.append('name', updatePetWithFormBody.name)
 }
if(updatePetWithFormBody.status !== undefined) {
 formUrlEncoded.append('status', updatePetWithFormBody.status)
 }

      return customInstance<unknown>(
      {url: `/pet/${petId}`, method: 'POST',
      headers: {'Content-Type': 'application/x-www-form-urlencoded', },
       data: formUrlEncoded, signal
    },
      options);
    }
  


export const getUpdatePetWithFormMutationOptions = <TData = Awaited<ReturnType<typeof updatePetWithForm>>, TError = ErrorType<void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<TData, TError,{petId: number;data: BodyType<UpdatePetWithFormBody>}, TContext>, request?: SecondParameter<typeof customInstance>}
) => {
const mutationKey = ['updatePetWithForm'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updatePetWithForm>>, {petId: number;data: BodyType<UpdatePetWithFormBody>}> = (props) => {
          const {petId,data} = props ?? {};

          return  updatePetWithForm(petId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions } as UseMutationOptions<TData, TError,{petId: number;data: BodyType<UpdatePetWithFormBody>}, TContext>}

    export type UpdatePetWithFormMutationResult = NonNullable<Awaited<ReturnType<typeof updatePetWithForm>>>
    export type UpdatePetWithFormMutationBody = BodyType<UpdatePetWithFormBody>
    export type UpdatePetWithFormMutationError = ErrorType<void>

    /**
 * @summary Updates a pet in the store with form data
 */
export const useUpdatePetWithForm = <TData = Awaited<ReturnType<typeof updatePetWithForm>>, TError = ErrorType<void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<TData, TError,{petId: number;data: BodyType<UpdatePetWithFormBody>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationResult<
        TData,
        TError,
        {petId: number;data: BodyType<UpdatePetWithFormBody>},
        TContext
      > => {

      const mutationOptions = getUpdatePetWithFormMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Deletes a pet
 */
export const deletePet = (
    petId: number,
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<unknown>(
      {url: `/pet/${petId}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeletePetMutationOptions = <TData = Awaited<ReturnType<typeof deletePet>>, TError = ErrorType<void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<TData, TError,{petId: number}, TContext>, request?: SecondParameter<typeof customInstance>}
) => {
const mutationKey = ['deletePet'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deletePet>>, {petId: number}> = (props) => {
          const {petId} = props ?? {};

          return  deletePet(petId,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions } as UseMutationOptions<TData, TError,{petId: number}, TContext>}

    export type DeletePetMutationResult = NonNullable<Awaited<ReturnType<typeof deletePet>>>
    
    export type DeletePetMutationError = ErrorType<void>

    /**
 * @summary Deletes a pet
 */
export const useDeletePet = <TData = Awaited<ReturnType<typeof deletePet>>, TError = ErrorType<void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<TData, TError,{petId: number}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationResult<
        TData,
        TError,
        {petId: number},
        TContext
      > => {

      const mutationOptions = getDeletePetMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * Returns a map of status codes to quantities
 * @summary Returns pet inventories by status
 */
export const getInventory = (
    
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<GetInventory200>(
      {url: `/store/inventory`, method: 'GET', signal
    },
      options);
    }
  

export const getGetInventoryQueryKey = () => {
    return [`/store/inventory`] as const;
    }

    
export const getGetInventoryQueryOptions = <TData = Awaited<ReturnType<typeof getInventory>>, TError = ErrorType<unknown>>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getInventory>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetInventoryQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getInventory>>> = ({ signal }) => getInventory(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getInventory>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetInventoryQueryResult = NonNullable<Awaited<ReturnType<typeof getInventory>>>
export type GetInventoryQueryError = ErrorType<unknown>


export function useGetInventory<TData = Awaited<ReturnType<typeof getInventory>>, TError = ErrorType<unknown>>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getInventory>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getInventory>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetInventory<TData = Awaited<ReturnType<typeof getInventory>>, TError = ErrorType<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getInventory>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getInventory>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetInventory<TData = Awaited<ReturnType<typeof getInventory>>, TError = ErrorType<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getInventory>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Returns pet inventories by status
 */

export function useGetInventory<TData = Awaited<ReturnType<typeof getInventory>>, TError = ErrorType<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getInventory>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetInventoryQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Place an order for a pet
 */
export const placeOrder = (
    order: BodyType<Order>,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<Order>(
      {url: `/store/order`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: order, signal
    },
      options);
    }
  


export const getPlaceOrderMutationOptions = <TData = Awaited<ReturnType<typeof placeOrder>>, TError = ErrorType<void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<TData, TError,{data: BodyType<Order>}, TContext>, request?: SecondParameter<typeof customInstance>}
) => {
const mutationKey = ['placeOrder'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof placeOrder>>, {data: BodyType<Order>}> = (props) => {
          const {data} = props ?? {};

          return  placeOrder(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions } as UseMutationOptions<TData, TError,{data: BodyType<Order>}, TContext>}

    export type PlaceOrderMutationResult = NonNullable<Awaited<ReturnType<typeof placeOrder>>>
    export type PlaceOrderMutationBody = BodyType<Order>
    export type PlaceOrderMutationError = ErrorType<void>

    /**
 * @summary Place an order for a pet
 */
export const usePlaceOrder = <TData = Awaited<ReturnType<typeof placeOrder>>, TError = ErrorType<void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<TData, TError,{data: BodyType<Order>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationResult<
        TData,
        TError,
        {data: BodyType<Order>},
        TContext
      > => {

      const mutationOptions = getPlaceOrderMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * For valid response try integer IDs with value >= 1 and <= 10. Other values will generated exceptions
 * @summary Find purchase order by ID
 */
export const getOrderById = (
    orderId: number,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<Order>(
      {url: `/store/order/${orderId}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetOrderByIdQueryKey = (orderId: number,) => {
    return [`/store/order/${orderId}`] as const;
    }

    
export const getGetOrderByIdQueryOptions = <TData = Awaited<ReturnType<typeof getOrderById>>, TError = ErrorType<void>>(orderId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderById>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderByIdQueryKey(orderId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderById>>> = ({ signal }) => getOrderById(orderId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(orderId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderById>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetOrderByIdQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderById>>>
export type GetOrderByIdQueryError = ErrorType<void>


export function useGetOrderById<TData = Awaited<ReturnType<typeof getOrderById>>, TError = ErrorType<void>>(
 orderId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderById>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderById>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetOrderById<TData = Awaited<ReturnType<typeof getOrderById>>, TError = ErrorType<void>>(
 orderId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderById>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderById>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetOrderById<TData = Awaited<ReturnType<typeof getOrderById>>, TError = ErrorType<void>>(
 orderId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderById>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Find purchase order by ID
 */

export function useGetOrderById<TData = Awaited<ReturnType<typeof getOrderById>>, TError = ErrorType<void>>(
 orderId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderById>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetOrderByIdQueryOptions(orderId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * For valid response try integer IDs with positive integer value. Negative or non-integer values will generate API errors
 * @summary Delete purchase order by ID
 */
export const deleteOrder = (
    orderId: number,
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<unknown>(
      {url: `/store/order/${orderId}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteOrderMutationOptions = <TData = Awaited<ReturnType<typeof deleteOrder>>, TError = ErrorType<void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<TData, TError,{orderId: number}, TContext>, request?: SecondParameter<typeof customInstance>}
) => {
const mutationKey = ['deleteOrder'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteOrder>>, {orderId: number}> = (props) => {
          const {orderId} = props ?? {};

          return  deleteOrder(orderId,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions } as UseMutationOptions<TData, TError,{orderId: number}, TContext>}

    export type DeleteOrderMutationResult = NonNullable<Awaited<ReturnType<typeof deleteOrder>>>
    
    export type DeleteOrderMutationError = ErrorType<void>

    /**
 * @summary Delete purchase order by ID
 */
export const useDeleteOrder = <TData = Awaited<ReturnType<typeof deleteOrder>>, TError = ErrorType<void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<TData, TError,{orderId: number}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationResult<
        TData,
        TError,
        {orderId: number},
        TContext
      > => {

      const mutationOptions = getDeleteOrderMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Creates list of users with given input array
 */
export const createUsersWithListInput = (
    userArrayBody: BodyType<UserArrayBody>,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<void>(
      {url: `/user/createWithList`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: userArrayBody, signal
    },
      options);
    }
  


export const getCreateUsersWithListInputMutationOptions = <TData = Awaited<ReturnType<typeof createUsersWithListInput>>, TError = ErrorType<void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<TData, TError,{data: BodyType<UserArrayBody>}, TContext>, request?: SecondParameter<typeof customInstance>}
) => {
const mutationKey = ['createUsersWithListInput'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof createUsersWithListInput>>, {data: BodyType<UserArrayBody>}> = (props) => {
          const {data} = props ?? {};

          return  createUsersWithListInput(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions } as UseMutationOptions<TData, TError,{data: BodyType<UserArrayBody>}, TContext>}

    export type CreateUsersWithListInputMutationResult = NonNullable<Awaited<ReturnType<typeof createUsersWithListInput>>>
    export type CreateUsersWithListInputMutationBody = BodyType<UserArrayBody>
    export type CreateUsersWithListInputMutationError = ErrorType<void>

    /**
 * @summary Creates list of users with given input array
 */
export const useCreateUsersWithListInput = <TData = Awaited<ReturnType<typeof createUsersWithListInput>>, TError = ErrorType<void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<TData, TError,{data: BodyType<UserArrayBody>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationResult<
        TData,
        TError,
        {data: BodyType<UserArrayBody>},
        TContext
      > => {

      const mutationOptions = getCreateUsersWithListInputMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get user by user name
 */
export const getUserByName = (
    username: string,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<User>(
      {url: `/user/${username}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetUserByNameQueryKey = (username: string,) => {
    return [`/user/${username}`] as const;
    }

    
export const getGetUserByNameQueryOptions = <TData = Awaited<ReturnType<typeof getUserByName>>, TError = ErrorType<void>>(username: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserByName>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetUserByNameQueryKey(username);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getUserByName>>> = ({ signal }) => getUserByName(username, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(username), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getUserByName>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetUserByNameQueryResult = NonNullable<Awaited<ReturnType<typeof getUserByName>>>
export type GetUserByNameQueryError = ErrorType<void>


export function useGetUserByName<TData = Awaited<ReturnType<typeof getUserByName>>, TError = ErrorType<void>>(
 username: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserByName>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUserByName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetUserByName<TData = Awaited<ReturnType<typeof getUserByName>>, TError = ErrorType<void>>(
 username: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserByName>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUserByName>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetUserByName<TData = Awaited<ReturnType<typeof getUserByName>>, TError = ErrorType<void>>(
 username: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserByName>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get user by user name
 */

export function useGetUserByName<TData = Awaited<ReturnType<typeof getUserByName>>, TError = ErrorType<void>>(
 username: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserByName>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetUserByNameQueryOptions(username,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * This can only be done by the logged in user.
 * @summary Updated user
 */
export const updateUser = (
    username: string,
    user: BodyType<User>,
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<unknown>(
      {url: `/user/${username}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: user
    },
      options);
    }
  


export const getUpdateUserMutationOptions = <TData = Awaited<ReturnType<typeof updateUser>>, TError = ErrorType<void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<TData, TError,{username: string;data: BodyType<User>}, TContext>, request?: SecondParameter<typeof customInstance>}
) => {
const mutationKey = ['updateUser'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updateUser>>, {username: string;data: BodyType<User>}> = (props) => {
          const {username,data} = props ?? {};

          return  updateUser(username,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions } as UseMutationOptions<TData, TError,{username: string;data: BodyType<User>}, TContext>}

    export type UpdateUserMutationResult = NonNullable<Awaited<ReturnType<typeof updateUser>>>
    export type UpdateUserMutationBody = BodyType<User>
    export type UpdateUserMutationError = ErrorType<void>

    /**
 * @summary Updated user
 */
export const useUpdateUser = <TData = Awaited<ReturnType<typeof updateUser>>, TError = ErrorType<void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<TData, TError,{username: string;data: BodyType<User>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationResult<
        TData,
        TError,
        {username: string;data: BodyType<User>},
        TContext
      > => {

      const mutationOptions = getUpdateUserMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * This can only be done by the logged in user.
 * @summary Delete user
 */
export const deleteUser = (
    username: string,
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<unknown>(
      {url: `/user/${username}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteUserMutationOptions = <TData = Awaited<ReturnType<typeof deleteUser>>, TError = ErrorType<void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<TData, TError,{username: string}, TContext>, request?: SecondParameter<typeof customInstance>}
) => {
const mutationKey = ['deleteUser'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteUser>>, {username: string}> = (props) => {
          const {username} = props ?? {};

          return  deleteUser(username,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions } as UseMutationOptions<TData, TError,{username: string}, TContext>}

    export type DeleteUserMutationResult = NonNullable<Awaited<ReturnType<typeof deleteUser>>>
    
    export type DeleteUserMutationError = ErrorType<void>

    /**
 * @summary Delete user
 */
export const useDeleteUser = <TData = Awaited<ReturnType<typeof deleteUser>>, TError = ErrorType<void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<TData, TError,{username: string}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationResult<
        TData,
        TError,
        {username: string},
        TContext
      > => {

      const mutationOptions = getDeleteUserMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Logs user into the system
 */
export const loginUser = (
    params: LoginUserParams,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<string>(
      {url: `/user/login`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getLoginUserQueryKey = (params: LoginUserParams,) => {
    return [`/user/login`, ...(params ? [params]: [])] as const;
    }

    
export const getLoginUserQueryOptions = <TData = Awaited<ReturnType<typeof loginUser>>, TError = ErrorType<void>>(params: LoginUserParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof loginUser>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getLoginUserQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof loginUser>>> = ({ signal }) => loginUser(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof loginUser>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type LoginUserQueryResult = NonNullable<Awaited<ReturnType<typeof loginUser>>>
export type LoginUserQueryError = ErrorType<void>


export function useLoginUser<TData = Awaited<ReturnType<typeof loginUser>>, TError = ErrorType<void>>(
 params: LoginUserParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof loginUser>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof loginUser>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useLoginUser<TData = Awaited<ReturnType<typeof loginUser>>, TError = ErrorType<void>>(
 params: LoginUserParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof loginUser>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof loginUser>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useLoginUser<TData = Awaited<ReturnType<typeof loginUser>>, TError = ErrorType<void>>(
 params: LoginUserParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof loginUser>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Logs user into the system
 */

export function useLoginUser<TData = Awaited<ReturnType<typeof loginUser>>, TError = ErrorType<void>>(
 params: LoginUserParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof loginUser>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getLoginUserQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Logs out current logged in user session
 */
export const logoutUser = (
    
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<void>(
      {url: `/user/logout`, method: 'GET', signal
    },
      options);
    }
  

export const getLogoutUserQueryKey = () => {
    return [`/user/logout`] as const;
    }

    
export const getLogoutUserQueryOptions = <TData = Awaited<ReturnType<typeof logoutUser>>, TError = ErrorType<void>>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof logoutUser>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getLogoutUserQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof logoutUser>>> = ({ signal }) => logoutUser(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof logoutUser>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type LogoutUserQueryResult = NonNullable<Awaited<ReturnType<typeof logoutUser>>>
export type LogoutUserQueryError = ErrorType<void>


export function useLogoutUser<TData = Awaited<ReturnType<typeof logoutUser>>, TError = ErrorType<void>>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof logoutUser>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof logoutUser>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useLogoutUser<TData = Awaited<ReturnType<typeof logoutUser>>, TError = ErrorType<void>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof logoutUser>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof logoutUser>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useLogoutUser<TData = Awaited<ReturnType<typeof logoutUser>>, TError = ErrorType<void>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof logoutUser>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Logs out current logged in user session
 */

export function useLogoutUser<TData = Awaited<ReturnType<typeof logoutUser>>, TError = ErrorType<void>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof logoutUser>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getLogoutUserQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Creates list of users with given input array
 */
export const createUsersWithArrayInput = (
    userArrayBody: BodyType<UserArrayBody>,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<void>(
      {url: `/user/createWithArray`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: userArrayBody, signal
    },
      options);
    }
  


export const getCreateUsersWithArrayInputMutationOptions = <TData = Awaited<ReturnType<typeof createUsersWithArrayInput>>, TError = ErrorType<void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<TData, TError,{data: BodyType<UserArrayBody>}, TContext>, request?: SecondParameter<typeof customInstance>}
) => {
const mutationKey = ['createUsersWithArrayInput'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof createUsersWithArrayInput>>, {data: BodyType<UserArrayBody>}> = (props) => {
          const {data} = props ?? {};

          return  createUsersWithArrayInput(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions } as UseMutationOptions<TData, TError,{data: BodyType<UserArrayBody>}, TContext>}

    export type CreateUsersWithArrayInputMutationResult = NonNullable<Awaited<ReturnType<typeof createUsersWithArrayInput>>>
    export type CreateUsersWithArrayInputMutationBody = BodyType<UserArrayBody>
    export type CreateUsersWithArrayInputMutationError = ErrorType<void>

    /**
 * @summary Creates list of users with given input array
 */
export const useCreateUsersWithArrayInput = <TData = Awaited<ReturnType<typeof createUsersWithArrayInput>>, TError = ErrorType<void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<TData, TError,{data: BodyType<UserArrayBody>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationResult<
        TData,
        TError,
        {data: BodyType<UserArrayBody>},
        TContext
      > => {

      const mutationOptions = getCreateUsersWithArrayInputMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * This can only be done by the logged in user.
 * @summary Create user
 */
export const createUser = (
    user: BodyType<User>,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<void>(
      {url: `/user`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: user, signal
    },
      options);
    }
  


export const getCreateUserMutationOptions = <TData = Awaited<ReturnType<typeof createUser>>, TError = ErrorType<void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<TData, TError,{data: BodyType<User>}, TContext>, request?: SecondParameter<typeof customInstance>}
) => {
const mutationKey = ['createUser'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof createUser>>, {data: BodyType<User>}> = (props) => {
          const {data} = props ?? {};

          return  createUser(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions } as UseMutationOptions<TData, TError,{data: BodyType<User>}, TContext>}

    export type CreateUserMutationResult = NonNullable<Awaited<ReturnType<typeof createUser>>>
    export type CreateUserMutationBody = BodyType<User>
    export type CreateUserMutationError = ErrorType<void>

    /**
 * @summary Create user
 */
export const useCreateUser = <TData = Awaited<ReturnType<typeof createUser>>, TError = ErrorType<void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<TData, TError,{data: BodyType<User>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationResult<
        TData,
        TError,
        {data: BodyType<User>},
        TContext
      > => {

      const mutationOptions = getCreateUserMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
